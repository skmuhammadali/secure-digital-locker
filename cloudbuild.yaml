steps:
  # Install dependencies
  - name: 'node:18'
    entrypoint: npm
    args: ['ci']

  # Run tests
  - name: 'node:18'
    entrypoint: npm
    args: ['test']
    env:
      - 'NODE_ENV=test'

  # Build application (if frontend exists)
  - name: 'node:18'
    entrypoint: npm
    args: ['run', 'build']
    env:
      - 'NODE_ENV=production'

  # Deploy to Cloud Functions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - functions
      - deploy
      - secure-document-api
      - --source=.
      - --entry-point=app
      - --runtime=nodejs18
      - --trigger=http
      - --allow-unauthenticated
      - --memory=512MB
      - --timeout=540s
      - --max-instances=100
      - --set-env-vars=NODE_ENV=production
    env:
      - 'GCLOUD_PROJECT=$PROJECT_ID'

  # Deploy static assets to Cloud Storage (if frontend exists)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gsutil
    args: ['-m', 'rsync', '-r', '-c', '-d', './public', 'gs://${_STATIC_BUCKET_NAME}']

  # Set up Cloud Storage bucket for documents
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create bucket if it doesn't exist
        gsutil ls gs://${_DOCUMENTS_BUCKET_NAME} || gsutil mb -l ${_BUCKET_LOCATION} gs://${_DOCUMENTS_BUCKET_NAME}
        
        # Set bucket versioning
        gsutil versioning set on gs://${_DOCUMENTS_BUCKET_NAME}
        
        # Set lifecycle policy
        gsutil lifecycle set bucket-lifecycle.json gs://${_DOCUMENTS_BUCKET_NAME}
        
        # Set uniform bucket-level access
        gsutil iam ch gs://${_DOCUMENTS_BUCKET_NAME}

  # Create Cloud KMS key ring and key
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create key ring if it doesn't exist
        gcloud kms keyrings create ${_KMS_KEY_RING} --location=${_KMS_LOCATION} || true
        
        # Create key if it doesn't exist
        gcloud kms keys create ${_KMS_KEY_NAME} \
          --location=${_KMS_LOCATION} \
          --keyring=${_KMS_KEY_RING} \
          --purpose=encryption || true

  # Set up Firestore indexes
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - firestore
      - indexes
      - create
      - --project=$PROJECT_ID
      - --quiet
    dir: '.'

  # Set up IAM policies
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Grant Cloud Functions access to KMS
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$PROJECT_ID@appspot.gserviceaccount.com" \
          --role="roles/cloudkms.cryptoKeyEncrypterDecrypter"
        
        # Grant Cloud Functions access to Cloud Storage
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$PROJECT_ID@appspot.gserviceaccount.com" \
          --role="roles/storage.objectAdmin"
        
        # Grant Cloud Functions access to Firestore
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$PROJECT_ID@appspot.gserviceaccount.com" \
          --role="roles/datastore.user"

substitutions:
  _DOCUMENTS_BUCKET_NAME: 'secure-documents-${PROJECT_ID}'
  _STATIC_BUCKET_NAME: 'secure-documents-static-${PROJECT_ID}'
  _BUCKET_LOCATION: 'US'
  _KMS_KEY_RING: 'document-encryption-ring'
  _KMS_KEY_NAME: 'document-encryption-key'
  _KMS_LOCATION: 'global'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

timeout: '1200s'